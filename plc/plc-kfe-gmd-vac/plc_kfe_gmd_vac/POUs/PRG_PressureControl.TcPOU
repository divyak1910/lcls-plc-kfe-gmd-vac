<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_PressureControl" Id="{8ef02f00-e542-4b0e-902f-3d7061b2691f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_PressureControl
VAR CONSTANT
		nDataTable_NumberOfRows : INT:=9;
END_VAR
VAR
	
	fCtrlOutput						: FLOAT;
	fBasicCtrlOutput						: FLOAT;
	f_Rep_POS: Float;
	
	
	



	
	fManValue											: FLOAT;
	bExtrapolate										: BOOL;
	fManSyncValue			: FLOAT;
	bSync						: BOOL;

	bHold						: BOOL;

	eMode						: E_CTRL_MODE;
	stCTRL_PID_PARAMS		: ST_CTRL_PID_PARAMS;
	stCTRL_LIN_INTERPOLATION_PARAMS		: ST_CTRL_LIN_INTERPOLATION_PARAMS;

	eErrorId					: E_CTRL_ERRORCODES;

	bARWactive				: BOOL;
	
	arrTable											: ARRAY[1..nDataTable_NumberOfRows,1..2] OF FLOAT;
	(* controller  *)
	fbCTRL_PID					: FB_CTRL_PID;
	fbCTRL_Normalize 	: FB_CTRL_NORMALIZE;
	fbCTRL_LIN_INTERPOLATION					: FB_CTRL_LIN_INTERPOLATION;

	bInit						: BOOL		:= TRUE;
		FTrig: F_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Set VRC upper limit
IF bInit
THEN
	VCN_40.M_SetThrottle(30); // default at start up, should be overridedn through epics pv
END_IF

//VCN //bAdditionalVCNIlk
IF (bAdditionalVCNIlk) THEN
	VCN_40.i_xExtIlkOK := ( fb_EM1K0_GMD_GCC_10.IG.xAT_VAC AND  fb_EM1K0_GMD_GCC_20.IG.xAT_VAC AND fb_EM1K0_GMD_GCC_30.IG.xAT_VAC AND fb_EM1K0_GMD_GCC_40.IG.xAT_VAC
							AND  fb_EM1K0_GMD_GCC_50.IG.xAT_VAC AND  fb_EM1K0_GMD_GCC_60.IG.xAT_VAC AND fb_EM1K0_GMD_GCC_70.IG.xAT_VAC)
								AND  fb_EM1K0_GMD_GPI_40.PG.xAT_VAC AND (NOT VVC_81.iq_stValve.q_xOPN_DO) AND(NOT VVC_82.iq_stValve.q_xOPN_DO);
	ELSE
		
		VCN_40.i_xExtIlkOK := fb_EM1K0_GMD_GPI_40.PG.xAT_VAC AND (NOT VVC_81.iq_stValve.q_xOPN_DO) AND(NOT VVC_82.iq_stValve.q_xOPN_DO);
END_IF

//VCN
VCN_40(i_xExtIlkOK :=, i_ReqPos:= );


(* Gauge selection *)
(*Assign reading to psuedo gauge*)
IF (fb_EM1K0_GMD_GCC_40.IG.rPRESS <=0.0001) AND (fb_EM1K0_GMD_GCC_40.IG.rPRESS >0) THEN GCP := fb_EM1K0_GMD_GCC_40.IG;
			ElSE GCP := fb_EM1K0_GMD_GPI_40.PG;
END_IF

(*-------------------------------------------------------------------*)
(*             PI CONTROL          *)
(*-------------------------------------------------------------------*)


IF bInit
THEN
	(* init parameter struct *)
	stCTRL_PID_PARAMS.tCtrlCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.tTaskCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.fKp					:= fKp1;			(* proportional gain Kp				*)
	stCTRL_PID_PARAMS.tTn					:= T#500ms;		(*  Tn									*)
	stCTRL_PID_PARAMS.tTv					:= T#200ms;	(*  Tv									*)
	stCTRL_PID_PARAMS.tTd					:= T#100ms;	(*  Td									*)
	stCTRL_PID_PARAMS.fOutMaxLimit			:=  20;			(* maximum output limit				*)
	stCTRL_PID_PARAMS.fOutMinLimit			:=  -100;			(* minimum output limit				*)

	
	(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
	arrTable[1,1] := 0;			arrTable[1,2] := 5;
	arrTable[2,1] := 0.000000265;		arrTable[1,2] := 10;
	arrTable[3,1] := 0.00000319;		arrTable[3,2] := 15;
	arrTable[4,1] :=  0.0000036;	arrTable[4,2] := 17;
	arrTable[5,1] :=  0000412;	arrTable[5,2] := 20;
	arrTable[6,1] := 0.001282;		arrTable[6,2] := 31;
	arrTable[7,1] := 0.002136;		arrTable[7,2] := 39;
	arrTable[8,1] := 0.0417;	arrTable[8,2] := 49;
	arrTable[9,1] := 0.1929;	arrTable[8,2] := 62;
	
	
	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_NumberOfRows		:= INT_TO_UINT(nDataTable_NumberOfRows);


	(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_PASSIVE;
	
	(* reset the init flag *)
	bInit							:= FALSE;
END_IF

	(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS.pDataTable_ADR			:= ADR(arrTable);
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_SIZEOF		:= SIZEOF(arrTable);
	 
	   fSetpointValue:= LIMIT(0,fSetpointValue,0.001);

if (VVC_80.M_IsClosed() ) THEN 
		//eMode	:= eCTRL_MODE_PASSIVE;
		fSetpointValue :=0; 
END_IF 	

if (bGo) THEN
	VCN_40.i_ReqPos:= fbCTRL_PID.fOut + fbCTRL_LIN_INTERPOLATION.fOut;
	IF (bReset) THEN
	(* set the mode to RESET*)
	eMode							:= eCTRL_MODE_RESET   ;
	VCN_40.M_ValveControl(CloseValve);
	//bReset := False;
	ELSE
		(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE   ;
 	VCN_40.M_ValveControl(PressureControl);
	END_IF
END_IF
FTRIG(CLK := bGo);
IF(FTrig.Q)THEN
		eMode							:= eCTRL_MODE_PASSIVE;
		VCN_40.M_ValveControl(CloseValve);
		fSetpointValue :=0;
END_IF


(* call interpolation fb *)
fbCTRL_LIN_INTERPOLATION		(	fIn						:= fSetpointValue,
									fManValue				:= fManValue,
									bExtrapolate				:= bExtrapolate,
									stParams				:= stCTRL_LIN_INTERPOLATION_PARAMS,
									eMode					:= eMode,

									fOut						=> ,
									eErrorId					=> eErrorId,
									bError					=> bError
								);

(* call controller *)
fbCTRL_PID(		fSetpointValue		:= fSetpointValue,
					fActualValue		:= GCP.rPRESS ,
					fManSyncValue	:= ,
					bSync				:= bSync,
					eMode				:= eMode,
					bHold				:= bHold,
					stParams			:= stCTRL_PID_PARAMS,
					fOut				=> ,
					bARWactive		=> bARWactive,
					eErrorId			=> eErrorId,
					bError				=> 
				);
				
				
bError := fbCTRL_PID.bError OR fbCTRL_LIN_INTERPOLATION.bError;



]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>